#!/usr/bin/env python3
"""Download latest Tastyworks package and install it, moving the old one aside.

Under Linux, the platform is more stable if you reinstall from scratch.
Do this regularly with this script (e.g. every day?).
"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import logging
import subprocess
import os
import time
import datetime
from urllib.request import urlretrieve
from os import path

import requests
import click
from selenium import webdriver
from selenium.webdriver.chrome import options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service


def get_deb_url(executable_path: str, headless: bool) -> str:
    """Obtain the URL to the latest version."""

    # Create driver.
    service = Service(executable_path)
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--ignore-ssl-errors=yes")
    options.add_argument("--ignore-certificate-errors")

    driver = webdriver.Chrome(service=service, options=options)

    # Open technology page.
    driver.get("https://tastytrade.com/technology")

    # Discard. tastyworks -> tastytrade popup
    popup = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located(
            (
                By.XPATH,
                '//button[contains(concat(" ", normalize-space(@class), " "), " btn-link ")]',
            )
        )
    )
    if popup:
        popup.click()

    # Click on download link.
    element = driver.find_element(
        By.XPATH, '//button[text()="Download tastytrade Now"]'
    )
    element.click()

    # Wait for overlay; find URL of latest version.
    element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.LINK_TEXT, "Linux 64-bit deb"))
    )
    deb_file_url = element.get_attribute("href")
    driver.close()

    return deb_file_url


def get_latest_file(archive_dir: str) -> tuple[str, str]:
    """Get the latest local file and its size."""
    filenames = sorted(os.listdir(archive_dir))
    if not filenames:
        return None, 0
    filename = path.join(archive_dir, filenames[-1])
    return filename, path.getsize(filename)


def download(url: str, archive_dir: str) -> str:
    """Retrieve the URL to a local file."""
    if not path.exists(archive_dir):
        os.makedirs(archive_dir)
    local_filename = path.join(
        archive_dir, "{}.{}".format(path.basename(url), datetime.date.today())
    )
    last_reported = [0]

    def report_progress(block_num, block_size, total_size):
        downloaded_bytes = block_num * block_size
        if downloaded_bytes - last_reported[0] > 0.05 * total_size:
            last_reported[0] = downloaded_bytes
            percent = downloaded_bytes / total_size
            logging.info(f"{downloaded_bytes} bytes retrieved ({percent:.0%})")

    urlretrieve(url, local_filename, report_progress)
    logging.info(f"Done.")
    return local_filename


def install(filename: str):
    """Install a local .deb package, safegarding the prior version aside."""

    # Move prior installation to temp dir.
    if path.exists("/opt/tastytrade"):
        timestamp = int(time.time())
        os.rename("/opt/tastytrade", f"/opt/tastytrade.saved_{timestamp}")

    # Install package.
    subprocess.check_call(["sudo", "dpkg", "-i", filename], shell=False)


DEFAULT_ARCHIVE_DIR = "/opt/archive/tastytrade"


@click.command()
@click.option("--headless/--no-headless", default=True)
def main(headless: bool):
    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s: %(message)s")

    # List the existing files.
    archive_dir = DEFAULT_ARCHIVE_DIR
    subprocess.check_call(["sudo", "/usr/bin/ls", "-l", archive_dir], shell=False)

    # Get the URL of the file to be downloaded.
    deb_file_url = get_deb_url("/snap/bin/chromium.chromedriver", headless)

    # Get the name and size of the latest file in the existing archive.
    latest_local_file, local_size = get_latest_file(archive_dir)

    # Get the size of the file to be downloaded.
    logging.info(f"Check size of {deb_file_url}")
    resp = requests.head(deb_file_url, allow_redirects=True)
    remote_size = int(resp.headers.get("content-length", -1))

    # Check if the file is the same.
    if remote_size == local_size:
        logging.info(f"Using local archive {latest_local_file}")
        filename = latest_local_file
    else:
        logging.info(f"Downloading {deb_file_url}")
        filename = download(deb_file_url, archive_dir)

    # Install the archive.
    logging.info(f"Installing file {filename}")
    install(filename)


if __name__ == "__main__":
    main()
