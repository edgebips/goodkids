#!/usr/bin/env python3
"""Get the list of transactions for a single TW account.

Running this script with `database-filename` and `account-pattern` will
incrementally update a local dbm/Python shelve mapping of unique transaction-id
to JSON/dict data for that account. You can access it with a shelve. Example:

    tastytrade-update transactions.db Margin

Notes:

* The script will automatically avoid fetching again old data.
* It will start at the beginning of the account time creation.
* You can just run this regularly to build a local database of all your
  transactions log.

NOTE: Your username and/or password is not stored anywhere. The session token,
however, is cached and reused as much as possible; where needed, your username
and password can be provided in one of three ways:

- As command-line arguments (--username, --password). Note that this makes them
  visible to procinfo for the root user while the script is running.

- As environment variables (`TW_USER` / `TW_PASSWORD`). Note that this makes
  them visible for the root while the program is running as it is possible
  inspect the environment of any process.

- If not provided, you will be queried on the command-line for their values,
  only when needed. The password is hidden from the console. But you have to
  type it in each time it is needed.

"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

from typing import Dict, List, Optional, Union
import datetime
import logging
import shelve
import pprint

import click
from dateutil import parser

from goodkids import session as sesslib
from goodkids import utils


Json = Union[Dict[str, 'Json'], List['Json'], str, int, float]


def get_approx_latest_time(db: shelve.Shelf) -> Optional[datetime.datetime]:
    """Return the approximately latest time."""
    # In order to do this, we find the largest id, and return the associated
    # date/time on that transaction. The ids are roughly, but not strictly,
    # incremental, so this should be good enough. The benefit of deriving the
    # latest time this way is that we don't have to do any housekeeping to keep
    # a special entry up-to-date, and we also don't have to parse any of the
    # values (this should scale a good amount).
    if len(db) == 0:
        return None
    max_id = max(db.keys())
    txn = db[max_id]
    return parser.parse(txn['executed-at'])


@click.command()
@click.argument('database') # Path to database file.
@click.option('--regexp', '-a') # Name or part of name of the account id or type
                                # or nickname.
@click.option('--username', '-u', help="Tastytrade username.")
@click.option('--password') # Tastytrade password.
def main(database: str, regexp: Optional[str],
         username: Optional[str], password: Optional[str]):
    logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')

    # Open the database and get the latest transaction stored in it from a
    # special slot.
    with shelve.open(database) as db:
        # Get the account.
        session = sesslib.get_session(username, password)
        accounts = utils.get_accounts(session)
        account = utils.filter_matching_account(accounts, regexp)
        if not account:
            logging.error(f"No account matches pattern '{regexp}': \n"
                          "{}".format(pprint.pformat(accounts)))
            return
        accid = account['account-number']

        # Compute time range for the account.
        latest_time = (sesslib.get_approx_latest_time(db) or
                       parser.parse(account['opened-at']))
        timestr_begin = latest_time.isoformat() + 'Z'
        timestr_end = datetime.datetime.now().isoformat() + 'Z'
        logging.info(f'Updating account {accid} from {timestr_begin} to {timestr_end}')

        # Fetch the list of transactions since the latest one.
        transactions = utils.paginated_get(
            session, f'/accounts/{accid}/transactions', params = {
                'start-date': timestr_begin,
                'end-date': timestr_end,
            })
        num_updated = 0
        num_skipped = 0
        for txn in transactions:
            key = str(txn['id'])
            if key in db:
                num_skipped += 1
            else:
                logging.info(f'> Storing transaction {key} (at {txn["executed-at"]})')
                num_updated += 1
                db[key] = txn
        logging.info(f'Transactions skipped: {num_skipped}')
        logging.info(f'Transactions updated: {num_updated}')


if __name__ == '__main__':
    main()
